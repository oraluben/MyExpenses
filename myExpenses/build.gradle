buildscript {
    repositories {
        google()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        // For Spoon snapshot, until 2.0.0 is released
    }
    dependencies {
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath "com.jaredsburrows:gradle-spoon-plugin:1.5.0"
        classpath 'com.novoda:gradle-android-command-plugin:2.0'
    }
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    // For Spoon snapshot, until 2.0.0 is released
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jakewharton.hugo'
apply plugin: "com.jaredsburrows.spoon"
apply plugin: 'com.novoda.android-command'
apply plugin: 'jacoco'

def quote(String input) {
    return "\"" + input + "\""
}

def getPropertyIfDefined(property) {
    return getPropertyIfDefined(property, "")
}

def getPropertyIfDefined(property, defaultValue) {
    if (project.hasProperty(property)) {
        return project.properties[property]
    }
    return defaultValue
}

android {
    sourceSets {
        main.res.srcDirs += 'src/main/categoryIcons'
    }
    compileSdkVersion project.compileSdkVersion
    useLibrary 'android.test.runner'
    useLibrary 'android.test.mock'
    useLibrary 'android.test.base'

    defaultConfig {
        applicationId "org.totschnig.myexpenses"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode 388
        versionName '3.0.6.1'
        multiDexEnabled true

        buildConfigField "String", "BUILD_DATE", "\"" + getDate() + "\""
        buildConfigField "String", "DISTRIBUTION", "\"GITHUB\""
        buildConfigField "String[]", "CATEGORY_ICONS", "{" + categoryIcons() + "}"
        testInstrumentationRunner "org.totschnig.myexpenses.MyTestRunner"
        testProguardFile "proguard-test.txt"

        vectorDrawables.useSupportLibrary = true
        resConfigs "en", "ar", "bg", "ca", "cs", "da", "de", "el", "es", "eu", "fr", "hr", "hu", "it", "iw", "ja", "km", "ko", "ms", "pl", "pt", "ro", "ru", "si", "ta", "tr", "uk", "vi", "pt_PT", "zh_CN", "zh_TW"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /*signingConfigs {
        release {
            storeFile file(getPropertyIfDefined("RELEASE_STORE_FILE", "unknown"))
            storePassword getPropertyIfDefined("RELEASE_STORE_PASSWORD")
            keyAlias getPropertyIfDefined("RELEASE_KEY_ALIAS")
            keyPassword getPropertyIfDefined("RELEASE_KEY_PASSWORD")

        }
    }*/
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            //signingConfig signingConfigs.release
            manifestPlaceholders = [appName: "@string/app_name", debug: "false"]
            applicationIdSuffix ""
        }
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [appName: "My Expenses Debug", debug: "true"]
            testCoverageEnabled true
        }
        forTest {
            initWith debug
            applicationIdSuffix ".fortest"
            manifestPlaceholders = [appName: "My Expenses Test", debug: "true"]
            matchingFallbacks = ['debug']
            buildConfigField "String", "TEST_LANG", quote(getPropertyIfDefined("testLang", "undefined"))
            buildConfigField "String", "TEST_COUNTRY", quote(getPropertyIfDefined("testCountry", "undefined"))
            buildConfigField "String", "TEST_CURRENCY", quote(getPropertyIfDefined("testCurrency", "undefined"))
            buildConfigField "int", "TEST_SCENARIO", getPropertyIfDefined('testScenario', "1")
        }
    }

    buildTypes.each { type ->
        type.resValue 'string', 'application_id', defaultConfig.applicationId + type.applicationIdSuffix
        type.resValue "string", 'sync_account_type', defaultConfig.applicationId + type.applicationIdSuffix + ".sync"
    }

    flavorDimensions "crashreporting", "security"

    productFlavors {
        acra {
            dimension "crashreporting"
        }
        conscript {
            dimension "security"
        }
    }

    lintOptions {
        disable 'InvalidPackage', 'MissingQuantity', 'MissingTranslation', 'ImpliedQuantity'
        abortOnError true
    }

    dexOptions {
        javaMaxHeapSize "2048M"
        jumboMode = true
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/gradle/incremental.annotation.processors'
    }
    testBuildType "forTest"

    variantFilter { variant ->
        if (project.hasProperty("buildType") && !variant.buildType.name.equals(project.ext.buildType)) {
            setIgnore(true)
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                maxHeapSize = "1024m"
            }
        }
    }
}

dependencies {
    implementation project(':transactionscontract')
    implementation "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    implementation 'com.squareup.phrase:phrase:1.1.0'
    kapt "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'frankiesardo:icepick:3.2.0'
    compileOnly 'frankiesardo:icepick-processor:3.2.0'
    kapt 'frankiesardo:icepick-processor:3.2.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    api 'com.google.auto.value:auto-value-annotations:1.6.6'
    kapt 'com.google.auto.value:auto-value:1.6.6'

    kapt 'com.ryanharter.auto.value:auto-value-gson:1.0.0'
    api 'com.ryanharter.auto.value:auto-value-gson-runtime:1.0.0'

    kapt 'com.gabrielittner.auto.value:auto-value-cursor:1.1.0'
    implementation 'com.gabrielittner.auto.value:auto-value-cursor-annotations:1.1.0'

    kapt 'com.ryanharter.auto.value:auto-value-parcel:0.2.8'

    implementation 'com.github.mtotschnig:StickyListHeaders:2.7.1'
    implementation 'com.github.mtotschnig:MaterialSeekBarPreference:87e7c0d19d'
    implementation project(':PlayLicensingOrig')
    implementation('com.gitlab.mtotschn:dav4android:fbaa5b51') {
        exclude group: "com.android.support", module: "support-annotations"
    }
    implementation 'com.itextpdf:itextg:5.5.10'
    acraImplementation "ch.acra:acra-mail:$rootProject.acraVersion"
    acraImplementation "ch.acra:acra-dialog:$rootProject.acraVersion"
    //at the moment, we need to stick with the last version that supports java 6
    //noinspection GradleDependency
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation 'org.apache.commons:commons-csv:1.5'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.github.mtotschnig:MPAndroidChart:8ebaf08edd'
    //implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0-alpha'
    implementation 'com.github.mtotschnig:Caldroid:d217ebc306'
    implementation 'com.github.mtotschnig:SimpleDialogFragments:0e6ab5bc05'
    implementation 'com.annimon:stream:1.2.1'
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.13.0'

    // WebDAV2
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okHttpVersion"

    // Dropbox
    implementation 'com.dropbox.core:dropbox-core-sdk:3.1.1'

    //noinspection GradleCompatible
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'org.apache.commons:commons-collections4:4.1'

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.github.tony19:logback-android-core:1.1.1-6'
    implementation('com.github.tony19:logback-android-classic:1.1.1-6') {
        // workaround issue #73
        exclude group: 'com.google.android', module: 'android'
    }

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0-beta01'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation project(path: ':setupwizard')

    //licence validation
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okHttpVersion"

    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'

    implementation 'com.github.lzyzsd:circleprogress:1.2.1'

    conscriptImplementation 'org.conscrypt:conscrypt-android:1.4.2'

    implementation 'com.squareup.sqlbrite3:sqlbrite:3.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation "androidx.test:runner:$rootProject.androidSupportTestVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.androidSupportTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion") {
        exclude module: 'accessibility-test-framework'
    }
    androidTestImplementation 'org.mockito:mockito-android:2.19.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'pl.pragmatists:JUnitParams:1.1.0'
    testImplementation 'org.mockito:mockito-core:2.19.0'
    testImplementation "org.robolectric:robolectric:$rootProject.robolectricVersion"
    testImplementation "org.robolectric:shadows-multidex:$rootProject.robolectricVersion"
    testImplementation 'org.assertj:assertj-core:3.8.0'
    androidTestImplementation 'org.assertj:assertj-core:3.8.0'
    androidTestImplementation "com.squareup.spoon:spoon-client:2.0.0-SNAPSHOT"
    androidTestImplementation 'com.jraska:falcon:2.1.0'
    androidTestImplementation 'com.jraska:falcon-spoon-compat:2.1.0'
    implementation "androidx.core:core-ktx:1.1.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // Room components
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.archLifecycleVersion"

    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.androidxArchVersion"

    // ViewModel Kotlin support
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.archLifecycleVersion"

    // Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutines"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutines"

}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}

spoon {
    //Ignore annotation must be removed from class TestMain
    //otherwise Runner will fail resolving the test
    className = "org.totschnig.myexpenses.test.screenshots.TestMain"
    methodName = "mkScreenShots"
    grantAll = true
}

task copyFileForFixture(type: com.novoda.gradle.command.Files) {
    script {
        push "tests/script/screenshot.jpg", "/sdcard/Android/data/org.totschnig.myexpenses.fortest/files/screenshot.jpg"
    }
}

def isR8Enabled() {
    if (project.hasProperty('android.enableR8')) {
        if (project.property('android.enableR8').equals("false")) {
            return false
        }
    }
    return true
}

if (getGradle().getStartParameter().getTaskRequests().toString().contains("Amazon")) {
    if (isR8Enabled())
        throw new GradleException('Amazon build requires R8 to be disabled.')
} else {
    if (!isR8Enabled())
        throw new GradleException('Any build (with the exception of Amazon) should use R8.')
}

def categoryIcons() {
    return new File("${projectDir}/src/main/categoryIcons/drawable")
            .listFiles()
            .collect { it.name }
            .collect { it.take(it.lastIndexOf('.')) }
            .collect { "\"" + it + "\"" }
            .join(", ")
}